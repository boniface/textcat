package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"runtime"
	"strings"
)

var header = `// THIS IS AN AUTOGENERATED FILE
// DO NOT EDIT

package textcat

type dataType struct {
	lang    string
	patUtf8 []string
	patByte []string
}

var data = []*dataType{
`

func main() {
	out, err := os.Create("../data.go")
	checkErr(err)
	fmt.Fprint(out, header)
	sep := ""
	for _, filename := range os.Args[1:] {
		lang := path.Base(filename)
		lang = lang[:len(lang)-len(path.Ext(lang))]
		fmt.Fprintf(out, "%s\t&dataType{\n\t\t\"%s\",\n\t\t[]string{", sep, lang)
		sep = ",\n"

		r, e := os.Open(filename)
		checkErr(e)
		b, e := ioutil.ReadAll(r)
		r.Close()
		checkErr(e)

		if !strings.HasSuffix(path.Dir(filename), "raw") {
			patterns := getPatterns(string(b), true)
			sep2 := "\n"
			for _, p := range patterns {
				fmt.Fprintf(out, "%s\t\t\t%q", sep2, p.s)
				sep2 = ",\n"
			}
		}
		fmt.Fprint(out, "},\n\t\t[]string{")

		patterns := getPatterns(string(b), false)
		sep2 := "\n"
		for _, p := range patterns {
			fmt.Fprintf(out, "%s\t\t\t%q", sep2, p.s)
			sep2 = ",\n"
		}
		fmt.Fprint(out, "}}")
	}
	fmt.Fprint(out, "}\n")
	out.Close()
}

func checkErr(err error) {
	if err != nil {
		_, filename, lineno, ok := runtime.Caller(1)
		if ok {
			fmt.Fprintf(os.Stderr, "%v:%v: %v\n", filename, lineno, err)
		}
		panic(err)
	}
}
